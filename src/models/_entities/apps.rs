//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.9

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "apps")]
pub struct Model {
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    #[sea_orm(unique)]
    pub bundle_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub icon_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub platform_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::app_versions::Entity")]
    AppVersions,
    #[sea_orm(
        belongs_to = "super::platforms::Entity",
        from = "Column::PlatformId",
        to = "super::platforms::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Platforms,
}

impl Related<super::app_versions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AppVersions.def()
    }
}

impl Related<super::platforms::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Platforms.def()
    }
}
